--############################################################
-- SQL EDA Project
--############################################################
-- This repository contains SQL scripts for exploratory data analysis (EDA)
-- on sales data. The code helps to:
-- ✅ Explore database structure (tables, columns)
-- ✅ Analyze customers, products, categories
-- ✅ Calculate key metrics (total sales, orders, products, customers)
-- ✅ Generate reports by country, category, gender, customer
-- ✅ Rank top and bottom performers (products, customers)
-- Useful for data profiling, business insights, and reporting.

--Explore all tables in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES

--Explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

--Explore All countries our customers ccome from
SELECT DISTINCT country from Gold.dim_customers

--Explore all categories " All major divisions"
SELECT DISTINCT category,subcategory,product_name FROM Gold.dim_products
ORDER BY 1,2,3

--Find the date of the first and last order
--How many years of sales available
SELECT 
MIN(order_date) first_order_date,
MAX(order_date) last_order_date,
DATEDIFF(year,MIN(order_date),MAX(order_date)) order_range_years,
DATEDIFF(MONTH,MIN(order_date),MAX(order_date)) order_range_month
from Gold.fact_sales


-- Find the youngest and oldest customers
SELECT 
MIN(birthdate) oldest_customer,
DATEDIFF(year,MIN(birthdate),GETDATE()) oldest_age,
MAX(birthdate) youngest_customer,
DATEDIFF(year,MAX(birthdate),GETDATE()) youngest_age
from Gold.dim_customers


--################################################################
--Find insights
--################################################################

--Find the Total Sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales

--Find how many items are sold
SELECT SUM(quantity) AS total_sales FROM gold.fact_sales

--Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales

--Find the Total number of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales  --customers orders multiple things in same order that's why Duplicate

--Find the total number of products
SELECT COUNT(product_name) as totle_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_name) as totle_products FROM gold.dim_products

--Find the total number of customers
SELECT COUNT(customer_key) as total_customers FROM gold.dim_customers
SELECT COUNT(DISTINCT customer_key) as total_customers FROM gold.dim_customers

--Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) as total_customers FROM gold.fact_sales

--Generate a Report that shows all key metrics of the business

SELECT 'Total_Sales' as measure_name,SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_Quantity' as measure_name,SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average_Price' as measure_name,AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_Nr. orders' as measure_name,COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales  --customers orders multiple things in same order that's why Duplicate
UNION ALL
SELECT 'Total_Nr. Products' as measure_name,COUNT(DISTINCT product_name) as measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total_Nr. Customers' as measure_name,COUNT(DISTINCT customer_key) as measure_value FROM gold.dim_customers

--#############################################################
--[Measure] by [Dimention]
--#############################################################

--Find total customers by country
SELECT country,count(DISTINCT customer_key) as total_customers from gold.dim_customers
group by country
ORDER by count(DISTINCT customer_key) DESC


--Find total customers by gender
SELECT gender,count(DISTINCT customer_key) as total_customers from gold.dim_customers
group by gender
ORDER by total_customers DESC

--Find total products by category
SELECT category,COUNT(DISTINCT product_name) as total_products from Gold.dim_products
group by category
ORDER BY total_products DESC

--What is the average cost in each category?
SELECT category,AVG(cost) as avg_cost from Gold.dim_products
group by category
ORDER BY avg_cost DESC

--What is the total revenue generated by each category?
SELECT dp.category,
SUM(fs.sales_amount) as Total_revenue  from Gold.fact_sales fs
LEFT JOIN Gold.dim_products dp
ON fs.product_key=dp.product_key
GROUP BY category
ORDER BY Total_revenue DESC

--Find the total revenue generated by each customer
SELECT 
dc.customer_number,
dc.first_name,
SUM(fs.sales_amount) as Total_revenue  from Gold.fact_sales fs
LEFT JOIN Gold.dim_customers dc
ON dc.customer_key=fs.customer_key
GROUP BY dc.customer_number,dc.first_name
ORDER BY Total_revenue DESC

--What is the distribution of sold items across countries?
SELECT dc.country,SUM(fs.quantity) as total_sales from gold.fact_sales fs
LEFT JOIN Gold.dim_customers dc
ON fs.customer_key = dc.customer_key
Group by dc.country
ORDER BY total_sales DESC

--##########################################################
--RANKING--
--##########################################################


--Which 5 Products generate the highest revenue?
SELECT TOP 5 dp.product_name,SUM(fs.sales_amount) as total_revenue from Gold.fact_sales fs
LEFT JOIN Gold.dim_products dp
ON dp.product_key = fs.product_key
GROUP BY dp.product_name
ORDER BY total_revenue DESC

--Using Window Functions
SELECT * FROM
	(SELECT 
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount)) as Rank_products,
	dp.product_name,SUM(fs.sales_amount) as total_revenue from Gold.fact_sales fs
	LEFT JOIN Gold.dim_products dp
	ON dp.product_key = fs.product_key
	GROUP BY dp.product_name)t 
WHERE Rank_products <= 5



--What are the 5 Worst-performig products in terms of sales?

SELECT TOP 5 dp.product_name,SUM(fs.sales_amount) as total_revenue from Gold.fact_sales fs
LEFT JOIN Gold.dim_products dp
ON dp.product_key = fs.product_key
GROUP BY dp.product_name
ORDER BY total_revenue ASC

--Find the top 10 customers who have generated the highest revenue

SELECT TOP 10 dc.customer_key,dc.first_name,SUM(fs.sales_amount) as total_revenue from Gold.fact_sales fs
LEFT JOIN Gold.dim_customers dc
ON dc.customer_key = fs.customer_key
GROUP BY dc.customer_key,dc.first_name
ORDER BY total_revenue DESC

-- The 3 customers with the fewest orders placed

SELECT TOP 3 
dc.customer_key,
dc.first_name,
dc.last_name,
COUNT(DISTINCT order_number) as total_orders 
FROM Gold.fact_sales fs
LEFT JOIN Gold.dim_customers dc
ON dc.customer_key = fs.customer_key
GROUP BY dc.customer_key,dc.first_name,dc.last_name
ORDER BY total_orders 

